Index: vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php b/vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php
--- a/vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php	(revision 6892ff3f2cc36e3d2ada602078914083f98af6ad)
+++ b/vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php	(date 1646907407401)
@@ -13,6 +13,8 @@
 use Shopware\Core\Content\Product\SearchKeyword\ProductSearchBuilderInterface;
 use Shopware\Core\Framework\Context;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
+use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\ContainsFilter;
+use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\MultiFilter;
 use Shopware\Core\Framework\Plugin\Exception\DecorationPatternException;
 use Shopware\Core\Framework\Routing\Annotation\Entity;
 use Shopware\Core\Framework\Routing\Annotation\RouteScope;
@@ -23,6 +25,7 @@
 use Symfony\Component\Routing\Annotation\Route;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
 
+
 /**
  * @RouteScope(scopes={"store-api"})
  */
@@ -48,8 +51,8 @@
         EventDispatcherInterface $eventDispatcher,
         ProductListingLoader $productListingLoader
     ) {
-        $this->eventDispatcher = $eventDispatcher;
-        $this->searchBuilder = $searchBuilder;
+        $this->eventDispatcher      = $eventDispatcher;
+        $this->searchBuilder        = $searchBuilder;
         $this->productListingLoader = $productListingLoader;
     }
 
@@ -79,8 +82,8 @@
      *                      },
      *                      @OA\Property(
      *                          property="search",
-     *                          description="Using the search parameter, the server performs a text search on all records based on their data model and weighting as defined in the entity definition using the SearchRanking flag.",
-     *                          type="string"
+     *                          description="Using the search parameter, the server performs a text search on all records based on their data model and weighting as
+     *                          defined in the entity definition using the SearchRanking flag.", type="string"
      *                      )
      *                  )
      *              }
@@ -89,8 +92,7 @@
      *      @OA\Response(
      *          response="200",
      *          description="Returns a product listing containing all products and additional fields.
-
-Note: Aggregations, currentFilters and availableSortings are empty in this response. If you need them to display a listing, use the /search route instead.",
+    Note: Aggregations, currentFilters and availableSortings are empty in this response. If you need them to display a listing, use the /search route instead.",
      *          @OA\JsonContent(ref="#/components/schemas/ProductListingResult")
      *     )
      * )
@@ -115,7 +117,41 @@
             ProductEvents::PRODUCT_SUGGEST_CRITERIA
         );
 
-        $result = $this->productListingLoader->load($criteria, $context);
+        $searchTerms         = explode(' ', $request->get('search'));
+        $filterName          = [];
+        $filterProdcutNumber = [];
+        $filterEan           = [];
+        $filterManufacturer  = [];
+
+        if (count($searchTerms) > 1) {
+            foreach ($searchTerms as $searchTerm) {
+                $filterName[]          = new ContainsFilter('product.name', $searchTerm);
+                $filterProdcutNumber[] = new ContainsFilter('product.productNumber', $searchTerm);
+                $filterEan[]           = new ContainsFilter('product.ean', $searchTerm);
+                $filterManufacturer[]  = new ContainsFilter('manufacturer.name', $searchTerm);
+            }
+            $_filterName         = new MultiFilter(MultiFilter::CONNECTION_AND, $filterName);
+            $_filterNumber       = new MultiFilter(MultiFilter::CONNECTION_OR, $filterProdcutNumber);
+            $_filterEan          = new MultiFilter(MultiFilter::CONNECTION_OR, $filterEan);
+            $_filterManufacturer = new MultiFilter(MultiFilter::CONNECTION_OR, $filterManufacturer);
+
+            $criteria->addFilter(new MultiFilter(MultiFilter::CONNECTION_OR, [$_filterName, $_filterNumber, $_filterEan, $_filterManufacturer]));
+        } else {
+            $searchTerm          = current($searchTerms);
+            $filterName          = new ContainsFilter('product.name', $searchTerm);
+            $filterProdcutNumber = new ContainsFilter('product.productNumber', $searchTerm);
+            $filterEan           = new ContainsFilter('product.ean', $searchTerm);
+            $filterManufacturer  = new ContainsFilter('manufacturer.name', $searchTerm);
+
+            $criteria->addFilter(new MultiFilter(MultiFilter::CONNECTION_OR, [$filterName, $filterProdcutNumber, $filterEan, $filterManufacturer]));
+        }
+
+        $criteria->addAssociations(['manufacturer']);
+        
+        $criteria->resetSorting();
+        $criteria->setTerm($request->get('search'));
+
+        // $this->searchBuilder->build($request, $criteria, $context);
 
         $result = ProductListingResult::createFrom($result);
 
Index: vendor/shopware/storefront/Controller/SearchController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/shopware/storefront/Controller/SearchController.php b/vendor/shopware/storefront/Controller/SearchController.php
--- a/vendor/shopware/storefront/Controller/SearchController.php	(revision 6892ff3f2cc36e3d2ada602078914083f98af6ad)
+++ b/vendor/shopware/storefront/Controller/SearchController.php	(date 1646907264574)
@@ -4,6 +4,7 @@
 
 use Shopware\Core\Content\Product\SalesChannel\Search\AbstractProductSearchRoute;
 use Shopware\Core\Framework\DataAbstractionLayer\Search\Criteria;
+use Shopware\Core\Framework\DataAbstractionLayer\Search\Filter\ContainsFilter;
 use Shopware\Core\Framework\Routing\Annotation\RouteScope;
 use Shopware\Core\Framework\Routing\Annotation\Since;
 use Shopware\Core\Framework\Routing\Exception\MissingRequestParameterException;
@@ -36,14 +37,21 @@
      */
     private $productSearchRoute;
 
+    /**
+     * @var EntityRepository
+     */
+    private EntityRepository $manufactureStreamRepository;
+
     public function __construct(
         SearchPageLoader $searchPageLoader,
         SuggestPageLoader $suggestPageLoader,
-        AbstractProductSearchRoute $productSearchRoute
+        AbstractProductSearchRoute $productSearchRoute,
+        EntityRepository $manufactureStreamRepository
     ) {
         $this->searchPageLoader = $searchPageLoader;
         $this->suggestPageLoader = $suggestPageLoader;
         $this->productSearchRoute = $productSearchRoute;
+        $this->manufactureStreamRepository = $manufactureStreamRepository;
     }
 
     /**
@@ -55,20 +63,32 @@
     {
         try {
             $page = $this->searchPageLoader->load($request, $context);
-            if ($page->getListing()->getTotal() === 1) {
-                $product = $page->getListing()->first();
-                if ($request->get('search') === $product->getProductNumber()) {
-                    $productId = $product->getId();
-
-                    return $this->forwardToRoute('frontend.detail.page', [], ['productId' => $productId]);
-                }
-            }
+//            if ($page->getListing()->getTotal() === 1) {
+//                $product = $page->getListing()->first();
+//                if ($request->get('search') === $product->getProductNumber()) {
+//                    $productId = $product->getId();
+//
+//                    return $this->forwardToRoute('frontend.detail.page', [], ['productId' => $productId]);
+//                }
+//            }
         } catch (MissingRequestParameterException $missingRequestParameterException) {
             return $this->forwardToRoute('frontend.home.page');
         }
 
+        if ($searchTerm = $request->get('search')) {
+            $manufacturer = $this->getManufacturer($searchTerm, $context->getContext());
+            $page->addExtension('manufacturer', $manufacturer);
+        }
+
         return $this->renderStorefront('@Storefront/storefront/page/search/index.html.twig', ['page' => $page]);
     }
+   
+    public function getManufacturer($searchTerm, $context)
+    {
+        $criteria = new Criteria();
+        $criteria->addFilter(new ContainsFilter('name', $searchTerm));
+        return $this->manufactureStreamRepository->search($criteria, $context)->getEntities();
+    }
 
     /**
      * @Since("6.0.0.0")
Index: vendor/shopware/storefront/DependencyInjection/controller.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/shopware/storefront/DependencyInjection/controller.xml b/vendor/shopware/storefront/DependencyInjection/controller.xml
--- a/vendor/shopware/storefront/DependencyInjection/controller.xml	(revision 6892ff3f2cc36e3d2ada602078914083f98af6ad)
+++ b/vendor/shopware/storefront/DependencyInjection/controller.xml	(date 1646907252755)
@@ -288,6 +288,7 @@
             <argument type="service" id="Shopware\Storefront\Page\Search\SearchPageLoader"/>
             <argument type="service" id="Shopware\Storefront\Page\Suggest\SuggestPageLoader"/>
             <argument type="service" id="Shopware\Core\Content\Product\SalesChannel\Search\ProductSearchRoute"/>
+            <argument type="service" id="product_manufacturer.repository"/>
 
             <call method="setContainer">
                 <argument type="service" id="service_container"/>
Index: vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php b/vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php
--- a/vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php	(revision 6892ff3f2cc36e3d2ada602078914083f98af6ad)
+++ b/vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php	(date 1646907485564)
@@ -22,6 +22,7 @@
 use Symfony\Component\Routing\Annotation\Route;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
 
+
 /**
  * @RouteScope(scopes={"store-api"})
  */
@@ -38,8 +39,8 @@
         EventDispatcherInterface $eventDispatcher,
         ProductListingLoader $productListingLoader
     ) {
-        $this->eventDispatcher = $eventDispatcher;
-        $this->searchBuilder = $searchBuilder;
+        $this->eventDispatcher      = $eventDispatcher;
+        $this->searchBuilder        = $searchBuilder;
         $this->productListingLoader = $productListingLoader;
     }
 
@@ -66,7 +67,8 @@
      *              @OA\Property(
      *                  property="search",
      *                  type="string",
-     *                  description="Using the search parameter, the server performs a text search on all records based on their data model and weighting as defined in the entity definition using the SearchRanking flag."
+     *                  description="Using the search parameter, the server performs a text search on all records based on their data model and weighting as defined in
+     *                  the entity definition using the SearchRanking flag."
      *              )
      *          )
      *      ),
@@ -90,7 +92,40 @@
             new ProductAvailableFilter($context->getSalesChannel()->getId(), ProductVisibilityDefinition::VISIBILITY_SEARCH)
         );
 
-        $this->searchBuilder->build($request, $criteria, $context);
+        $searchTerms         = explode(' ', $request->get('search'));
+        $filterName          = [];
+        $filterProdcutNumber = [];
+        $filterEan           = [];
+        $filterManufacturer  = [];
+
+        if (count($searchTerms) > 1) {
+            foreach ($searchTerms as $searchTerm) {
+                $filterName[]          = new ContainsFilter('product.name', $searchTerm);
+                $filterProdcutNumber[] = new ContainsFilter('product.productNumber', $searchTerm);
+                $filterEan[]           = new ContainsFilter('product.ean', $searchTerm);
+                $filterManufacturer[]  = new ContainsFilter('manufacturer.name', $searchTerm);
+            }
+            $_filterName         = new MultiFilter(MultiFilter::CONNECTION_AND, $filterName);
+            $_filterNumber       = new MultiFilter(MultiFilter::CONNECTION_OR, $filterProdcutNumber);
+            $_filterEan          = new MultiFilter(MultiFilter::CONNECTION_OR, $filterEan);
+            $_filterManufacturer = new MultiFilter(MultiFilter::CONNECTION_OR, $filterManufacturer);
+
+            $criteria->addFilter(new MultiFilter(MultiFilter::CONNECTION_OR, [$_filterName, $_filterNumber, $_filterEan, $_filterManufacturer]));
+        } else {
+            $searchTerm          = current($searchTerms);
+            $filterName          = new ContainsFilter('product.name', $searchTerm);
+            $filterProdcutNumber = new ContainsFilter('product.productNumber', $searchTerm);
+            $filterEan           = new ContainsFilter('product.ean', $searchTerm);
+            $filterManufacturer  = new ContainsFilter('manufacturer.name', $searchTerm);
+            $criteria->addFilter(new MultiFilter(MultiFilter::CONNECTION_OR, [$filterName, $filterProdcutNumber, $filterEan, $filterManufacturer]));
+        }
+
+        $criteria->addAssociations(['manufacturer']); 
+
+        $criteria->resetSorting();
+        $criteria->setTerm((string)$request->get('search'));
+
+        // $this->searchBuilder->build($request, $criteria, $context);
 
         $result = $this->productListingLoader->load($criteria, $context);
 
